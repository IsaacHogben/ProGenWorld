#pragma kernel CSMain

StructuredBuffer<uint> blockIds;
RWStructuredBuffer<uint> result;

int chunkSize;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    uint mask = 0u;
    int s = chunkSize + 1;
    uint idx;
    bool found;

    // ---- +X ----
    found = false;
    for (int y1 = 0; y1 < s && !found; y1++)
        for (int z1 = 0; z1 < s; z1++)
        {
            uint b = blockIds[(s - 1) + y1 * s + z1 * s * s];
            if (b != 0u)
            {
                mask |= 1u;
                found = true;
                break;
            }
        }

    // ---- -X ----
    found = false;
    for (int y2 = 0; y2 < s && !found; y2++)
        for (int z2 = 0; z2 < s; z2++)
        {
            uint b = blockIds[0 + y2 * s + z2 * s * s];
            if (b != 0u)
            {
                mask |= 2u;
                found = true;
                break;
            }
        }

    // ---- +Y ----
    found = false;
    for (int x3 = 0; x3 < s && !found; x3++)
        for (int z3 = 0; z3 < s; z3++)
        {
            uint b = blockIds[x3 + (s - 1) * s + z3 * s * s];
            if (b != 0u)
            {
                mask |= 4u;
                found = true;
                break;
            }
        }

    // ---- -Y ----
    found = false;
    for (int x4 = 0; x4 < s && !found; x4++)
        for (int z4 = 0; z4 < s; z4++)
        {
            uint b = blockIds[x4 + 0 * s + z4 * s * s];
            if (b != 0u)
            {
                mask |= 8u;
                found = true;
                break;
            }
        }

    // ---- +Z ----
    found = false;
    for (int x5 = 0; x5 < s && !found; x5++)
        for (int y5 = 0; y5 < s; y5++)
        {
            uint b = blockIds[x5 + y5 * s + (s - 1) * s * s];
            if (b != 0u)
            {
                mask |= 16u;
                found = true;
                break;
            }
        }

    // ---- -Z ----
    found = false;
    for (int x6 = 0; x6 < s && !found; x6++)
        for (int y6 = 0; y6 < s; y6++)
        {
            uint b = blockIds[x6 + y6 * s + 0 * s * s];
            if (b != 0u)
            {
                mask |= 32u;
                found = true;
                break;
            }
        }

    result[0] = mask;
}
